openapi: 3.0.0
info:
  description: |
    This is a sample Herodotos server which is part of odysseia.

    # Introduction
    This API is documented in **OpenAPI format** and is using [ReDoc](https://github.com/Redocly/redoc)

    # Herodotos in Greek

    Ἡροδότου Ἁλικαρνησσέος ἱστορίης ἀπόδεξις ἥδε, ὡς μήτε τὰ γενόμενα ἐξ ἀνθρώπων τῷ χρόνῳ ἐξίτηλα γένηται, μήτε ἔργα μεγάλα τε καὶ θωμαστά, τὰ μὲν Ἕλλησι τὰ δὲ βαρβάροισι ἀποδεχθέντα, ἀκλεᾶ γένηται, τά τε ἄλλα καὶ δι᾽ ἣν αἰτίην ἐπολέμησαν ἀλλήλοισι.
    
    # Herodotos in English

    This is the display of the inquiry of Herodotus of Halicarnassus, so that things done by man not be forgotten in time, and that great and marvelous deeds, some displayed by the Hellenes, some by the barbarians, not lose their glory, including among others what was the cause of their waging war on each other.

    # Note on text

    [Text can be found here](http://www.perseus.tufts.edu/hopper/text?doc=Perseus%3atext%3a1999.01.0125)  

  termsOfService: https://github.com/joerivrij/odysseia
  contact:
    email: joerivrijaldenhoven@odysseia.io
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
host: localhost:5000
basePath: /herodotos/v1
tags:
  - name: health
    description: Endpoints relating to health and checks
  - name: text
    description: Endpoints relating to getting text based questions
  - name: author
    description: Endpoints relating to authors
schemes:
  - http
paths:
  /ping:
    get:
      tags:
        - health
      x-code-samples:
        - lang: 'Golang'
          source: |
            resp, err := http.Get("http://localhost:5000/herodotos/v1/ping")
            if err != nil {
              // handle error
            }
            defer resp.Body.Close()
            body, err := io.ReadAll(resp.Body)
            response, err := models.UnmarshalPing(body)
      summary: PingPong
      description: Returns a pong when pinged
      operationId: getPing
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ping'
        '405':
          description: method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MethodNotAllowedError'
  /health:
    get:
      tags:
        - health
      x-code-samples:
        - lang: 'Golang'
          source: |
            resp, err := http.Get("http://localhost:5000/herodotos/v1/health")
            if err != nil {
              // handle error
            }
            defer resp.Body.Close()
            body, err := io.ReadAll(resp.Body)
            response, err := models.UnmarshalHealth(body)
      summary: Health
      description: See the liveliness of the api
      operationId: getHealth
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
        '405':
          description: method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MethodNotAllowedError'
  /createQuestion:
    get:
      tags:
        - text
      x-code-samples:
        - lang: 'Golang'
          source: |
            resp, err := http.Get("http://localhost:5000/herodotos/v1/createQuestion?author=herodotos")
            if err != nil {
              // handle error
            }
            defer resp.Body.Close()
            body, err := io.ReadAll(resp.Body)
            response, err := models.UnmarshalCreateQuestionResponse(body)
      parameters:
        - name: author
          in: query
          description: author to use
          required: true
          type: string
      summary: Create A New Sentence
      description: Based on an author this endpoint returns a setence
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSentenceResponse'
        '400':
          description: invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '405':
          description: method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MethodNotAllowedError'
  /authors:
    get:
      tags:
        - author
      x-code-samples:
        - lang: 'Golang'
          source: |
            resp, err := http.Get("http://localhost:5000/herodotos/v1/authors")
            if err != nil {
              // handle error
            }
            defer resp.Body.Close()
            body, err := io.ReadAll(resp.Body)
            response, err := models.UnmarshallAuthors(body)
      summary: Query available authors
      description: Returns an array of authors that have sentences attached
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authors'
        '400':
          description: invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '405':
          description: method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MethodNotAllowedError'
  /checkSentence:
    post:
      tags:
        - text
      x-code-samples:
        - lang: 'Golang'
          source: |
            values := map[string]string{
            	"answerSentence": "Sentence", "sentenceId": "GmBFYHkBkbwXxxT5S6F_", "author": "herodotos"
            }
            jsonValue, _ := json.Marshal(values)
            resp, err := http.Post("http://localhost:5000/herodotos/v1/checkSentence", bytes.NewBuffer(jsonValue))
            if err != nil {
              // handle error
            }
            defer resp.Body.Close()
            body, err := io.ReadAll(resp.Body)
            response, err := models.UnmarshallCheckSentence(body)
      requestBody:
        $ref: '#/components/requestBodies/CheckSentence'
      summary: Check correctness of sentence
      description: Takes the given sentence and checks the levenshtein distance for the sentence and per word
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckSentenceResponse'
        '400':
          description: invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '405':
          description: method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MethodNotAllowedError'

components:
  schemas:
    Ping:
      type: object
      properties:
        result:
          type: string
          example: pong
    Health:
      type: object
      properties:
        healthy:
          type: boolean
          example: true
        time:
          type: string
          example: 2021-07-02 16:54:40.560826217 +0200 CEST m=+7.555467587
        databaseHealth:
          type: object
          properties:
            healthy:
              type: boolean
              example: true
            clusterName:
              type: string
              example: elasticsearch
            serverName:
              type: string
              example: elasticsearch-master-0
            serverVersion:
              type: string
              example: 7.12.0
        memory:
          type: object
          properties:
            free:
              type: number
              example: 0
            alloc:
              type: number
              example: 22
            totalAlloc:
              type: number
              example: 22
            sys:
              type: number
              example: 71
            unit:
              type: string
              example: mb
        cpuPercentage:
          type: string
          example: 10%
    CreateSentenceResponse:
      type: object
      properties:
        sentence:
          type: string
          example: Ἡροδότου Ἁλικαρνησσέος ἱστορίης ἀπόδεξις ἥδε
        sentenceId:
          type: string
          description: elastic _id
          example: LzxmXHkB8kAluuS8mCqs
    Authors:
      type: array
      items:
        $ref: '#/components/schemas/Author'
    Author:
      type: object
      properties:
        author:
          type: string
          example: herodotos
    CheckSentenceRequest:
      type: object
      properties:
        answerSentence:
          type: string
          example: The Foenicians. ;came to Argos,,.;:'' af
        sentenceId:
          type: string
          example: LjxmXHkB8kAluuS8mCoN
        author:
          type: string
          example: herodotos
    CheckSentenceResponse:
      type: object
      properties:
        levenshteinPercentage:
          type: string
          example: 51.85
        quizSentence:
          type: string
          example: The Phoenicians came to Argos, and set out their cargo
        answerSentence:
          type: string
          example: The Foenicians. ;came to Argos,,.;:'' af
        splitQuizSentence:
          type: array
          items:
            type: string
          example: [one, two]
        splitAnswerSentence:
          type: array
          items:
            type: string
          example: [one, two]
        matchingWords:
          type: array
          items:
            $ref: '#/components/schemas/MatchingWord'
        nonMatchingWords:
          type: array
          items:
            $ref: '#/components/schemas/NonMatchingWord'
    MatchingWord:
      type: object
      properties:
        word:
          type: string
          example: Phoenicians
        sourceIndex:
          type: number
          example: 1
    NonMatchingWord:
      type: object
      properties:
        match:
          type: string
          example: Foenicians
        Levenshtein:
          type: number
          example: 3
        AnswerIndex:
          type: number
          example: 1
        percentage:
          type: string
          example: 51.85
    ValidationError:
      type: object
      properties:
        uniqueCode:
          type: string
        errorModel:
          type: object
          properties:
            validationField:
              type: string
            validationMessage:
              type: string
    MethodNotAllowedError:
      type: object
      properties:
        uniqueCode:
          type: string
        errorModel:
          type: object
          properties:
            allowedMethods:
              type: string
            methodError:
              type: string
  requestBodies:
    CheckSentence:
      content:
        application/json:
          schema:
            allOf:
              - description: SentenceCorrectnessCheck
                title: Sentence
              - $ref: '#/components/schemas/CheckSentenceRequest'
      description: Query to see correctness of sentence
      required: true
