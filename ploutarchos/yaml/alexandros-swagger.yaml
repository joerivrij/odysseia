openapi: 3.0.0
info:
  description: |
    This is a sample Alexandros server which is part of odysseia.

    # Introduction
    This API is documented in **OpenAPI format** and is using [ReDoc](https://github.com/Redocly/redoc)

    # Ploutarchos, in regards to Alexander, in Greek

    Ἀλέξανδρος ὅτι τῷ γένει πρὸς πατρὸς μὲν ἦν Ἡρακλείδης ἀπὸ Καράνου, πρὸς δὲ μητρὸς Αἰακίδης ἀπὸ Νεοπτολέμου, τῶν πάνυ πεπιστευμένων ἐστί. λέγεται δέ Φίλιππος ἐν [p. 226] θρᾴκῃ τῇ Ὀλυμπιάδι συμμυηθείς αὐτός τε μειράκιον ὢν ἔτι κἀκείνης παιδὸς ὀρφανῆς γονέων ἐρασθῆναι καὶ τὸν γάμον οὕτως ἁρμόσαι, πείσας τὸν ἀδελφὸν αὐτῆς Ἀρύμβαν.

    # Ploutarchos, in regards to Alexander, in English

    As for the lineage of Alexander, on his father's side he was a descendant of Heracles through Caranus, and on his mother's side a descendant of Aeacus through Neoptolemus; this is accepted without any question. And we are told that Philip, after being initiated into the mysteries of Samothrace at the same time with Olympias, he himself being still a youth and she an orphan child, fell in love with her and betrothed himself to her at once with the consent of her brother, Arymbas.
    # Note on text

    [Text can be found here](http://www.perseus.tufts.edu/hopper/text?doc=Perseus%3Atext%3A2008.01.0129%3Achapter%3D2%3Asection%3D1)

  termsOfService: https://github.com/joerivrij/odysseia
  contact:
    email: joerivrijaldenhoven@odysseia.io
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
host: localhost:5000
basePath: /alexandros/v1
tags:
  - name: health
    description: Endpoints relating to health and checks
  - name: text
    description: Endpoints relating to getting text based questions
  - name: search
    description: Endpoints relating to searches
schemes:
  - http
paths:
  /ping:
    get:
      tags:
        - health
      x-code-samples:
        - lang: 'Golang'
          source: |
            resp, err := http.Get("http://localhost:5000/herodotos/v1/ping")
            if err != nil {
              // handle error
            }
            defer resp.Body.Close()
            body, err := io.ReadAll(resp.Body)
            response, err := models.UnmarshalPing(body)
      summary: PingPong
      description: Returns a pong when pinged
      operationId: getPing
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ping'
        '405':
          description: method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MethodNotAllowedError'
  /health:
    get:
      tags:
        - health
      x-code-samples:
        - lang: 'Golang'
          source: |
            resp, err := http.Get("http://localhost:5000/herodotos/v1/health")
            if err != nil {
              // handle error
            }
            defer resp.Body.Close()
            body, err := io.ReadAll(resp.Body)
            response, err := models.UnmarshalHealth(body)
      summary: Health
      description: See the liveliness of the api
      operationId: getHealth
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
        '405':
          description: method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MethodNotAllowedError'

  /search:
    get:
      tags:
        - search
      x-code-samples:
        - lang: 'Golang'
          source: |
            resp, err := http.Get("http://localhost:5000/alexandros/v1/search?word=αγα")
            if err != nil {
              // handle error
            }
            defer resp.Body.Close()
            body, err := io.ReadAll(resp.Body)
            response, err := models.UnmarshalSearchForWord(body)
      parameters:
        - name: word
          in: query
          description: author to use
          required: true
          type: string
      summary: Query a word
      description: Based on a partial word return a max of 10 results
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meroi'
        '400':
          description: invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      '404':
        description: not found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotFoundError'
        '405':
          description: method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MethodNotAllowedError'

components:
  schemas:
    Ping:
      type: object
      properties:
        result:
          type: string
          example: pong
    Health:
      type: object
      properties:
        healthy:
          type: boolean
          example: true
        time:
          type: string
          example: 2021-07-02 16:54:40.560826217 +0200 CEST m=+7.555467587
        databaseHealth:
          type: object
          properties:
            healthy:
              type: boolean
              example: true
            clusterName:
              type: string
              example: elasticsearch
            serverName:
              type: string
              example: elasticsearch-master-0
            serverVersion:
              type: string
              example: 7.12.0
        memory:
          type: object
          properties:
            free:
              type: number
              example: 0
            alloc:
              type: number
              example: 22
            totalAlloc:
              type: number
              example: 22
            sys:
              type: number
              example: 71
            unit:
              type: string
              example: mb
        cpuPercentage:
          type: string
          example: 10%
    ValidationError:
      type: object
      properties:
        uniqueCode:
          type: string
        errorModel:
          type: object
          properties:
            validationField:
              type: string
            validationMessage:
              type: string
    NotFoundError:
      type: object
      properties:
        uniqueCode:
          type: string
        errorModel:
          type: object
          properties:
            reason:
              type: string
            type:
              type: string
    Meroi:
      type: array
      items:
        $ref: '#/components/schemas/SearchWordResponse'
    SearchWordResponse:
      type: object
      properties:
        greek:
          type: string
          description: the Greek word
          required: true
          example: αγαν
        english:
          type: string
          description: the English word
          required: true
          example: too much
    MethodNotAllowedError:
      type: object
      properties:
        uniqueCode:
          type: string
        errorModel:
          type: object
          properties:
            allowedMethods:
              type: string
            methodError:
              type: string
  requestBodies:
    CheckSentence:
      content:
        application/json:
          schema:
            allOf:
              - description: SentenceCorrectnessCheck
                title: Sentence
              - $ref: '#/components/schemas/CheckSentenceRequest'
      description: Query to see correctness of sentence
      required: true
